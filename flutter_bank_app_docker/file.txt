CAMBIOS REALIZADOS PARA DOCKERIZAR EL ENDPOINT PYTHON
Fecha: 01/03/2025

1. ARCHIVOS CREADOS:
   - Dockerfile.api: Configuración para construir la imagen Docker del endpoint Python
   - requirements.api.txt: Dependencias necesarias para el funcionamiento del endpoint

2. ARCHIVOS MODIFICADOS:
   - docker-compose.yml: Añadido nuevo servicio 'financial_api' para ejecutar el endpoint
   - volumesOdoo/addons/accion_cron/models/action_cron.py: Actualizado para usar los nombres de servicios Docker en lugar de localhost

3. CONFIGURACIÓN DEL SERVICIO:
   - Puerto expuesto: 8000
   - Base de imagen: python:3.9-slim
   - Dependencias principales: FastAPI, Uvicorn, yfinance
   - Volumen montado: ./volumesOdoo/addons/valores_bolsa:/app/valores_bolsa

4. INSTRUCCIONES DE USO:
   - Iniciar el servicio: docker-compose up financial_api
   - Acceder al endpoint: http://localhost:8000
   - Endpoints disponibles:
     * GET /: Mensaje de bienvenida
     * GET /stock/{company}: Obtener precio de acciones
     * GET /crypto/{coin}: Obtener precio de criptomonedas
     * GET /commodity/{commodity}: Obtener precio de materias primas
     * GET /all: Obtener todos los precios

5. INTEGRACIÓN CON ODOO:
   - El endpoint está disponible en http://financial_api:8000 desde dentro de la red Docker
   - Para usar en cron de Odoo, se ha actualizado la URL del endpoint en el módulo accion_cron
   - La comunicación entre servicios utiliza los nombres de los contenedores:
     * financial_api:8000 para acceder al API de datos financieros
     * web_server:3000 para enviar los datos al servidor web principal

6. ESTADO ACTUAL:
   - Imagen Docker construida exitosamente: flutter_bank_app_docker-financial_api
   - Dependencias instaladas: FastAPI 0.95.1, Uvicorn 0.22.0, yfinance 0.2.18, pydantic 1.10.7
   - El servicio está listo para ser iniciado con docker-compose up financial_api

7. SOLUCIÓN AL PROBLEMA DE YFINANCE EN DOCKER:
   - Problema: yfinance no puede obtener datos dentro de un contenedor Docker debido a problemas de conectividad y certificados.
   - Soluciones implementadas:
     1. Instalación de dependencias del sistema necesarias (gcc, libc6-dev, libffi-dev, ca-certificates)
     2. Actualización de certificados CA con update-ca-certificates
     3. Configuración de variables de entorno para Python
     4. Implementación de sistema de reintentos para las solicitudes HTTP
     5. Adición de User-Agent personalizado para evitar bloqueos
     6. Aumento del período de datos solicitado a "5d" en lugar de "1d"
     7. Adición de retrasos entre solicitudes para evitar límites de tasa
     8. Mejora del manejo de errores y logging para depuración

   - Para reconstruir la imagen con estos cambios:
     ```
     docker-compose build financial_api
     docker-compose up financial_api
     ```

   - Si persisten los problemas:
     1. Verificar que no hay restricciones de red en el entorno Docker
     2. Comprobar que los DNS están configurados correctamente
     3. Intentar ejecutar con la opción --network="host" (solo para pruebas)
     4. Considerar usar una API alternativa si Yahoo Finance sigue bloqueando las solicitudes

8. NUEVAS MEJORAS IMPLEMENTADAS (02/03/2025):
   - Sistema de caché para datos financieros:
     * Implementación de un sistema de caché en memoria para almacenar temporalmente los datos obtenidos de las APIs
     * Tiempo de expiración configurable (por defecto 1 hora)
     * Reducción significativa de solicitudes a APIs externas
     * Mejora del rendimiento y tiempos de respuesta
     * Persistencia opcional de caché en disco para mantener datos entre reinicios

   - API financiera alternativa (Alpha Vantage):
     * Integración con Alpha Vantage como fuente alternativa de datos financieros
     * Sistema de fallback en cascada: intenta primero Yahoo Finance, luego Alpha Vantage, finalmente datos estáticos
     * Configuración para alternar entre APIs o usar ambas simultáneamente
     * Soporte para los mismos tipos de activos (acciones, criptomonedas, materias primas)
     * Nota: Alpha Vantage también tiene límites en su versión gratuita (5 solicitudes por minuto, 500 por día)

   - Cambios en el código:
     * Añadida clase CacheManager para gestionar el almacenamiento y recuperación de datos en caché
     * Implementado cliente para Alpha Vantage con manejo de errores y límites
     * Refactorización de la función get_price para usar el sistema de caché y múltiples APIs
     * Mejora del endpoint de diagnóstico para mostrar estado de caché y APIs
     * Actualización de dependencias en requirements.api.txt

   - Para aplicar estos cambios:
     ```
     docker-compose build financial_api
     docker-compose up -d financial_api
     ```

   - Consideraciones adicionales:
     * Para usar Alpha Vantage se requiere una API key gratuita (obtener en https://www.alphavantage.co/support/#api-key)
     * La API key debe configurarse como variable de entorno ALPHA_VANTAGE_API_KEY
     * El sistema de caché reduce significativamente las solicitudes a las APIs externas
     * Los datos en caché se actualizan automáticamente cuando expiran
     * Se pueden ajustar los tiempos de caché según las necesidades específicas de la aplicación
